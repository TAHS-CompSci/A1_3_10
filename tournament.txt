--------------------------------------------------------------------------------
Section 0 - Line up
--------------------------------------------------------------------------------
Player 0 (P0): Reecie Pooh, Win
        Just beat everyone.
Player 1 (P1): Green87, I have no idea what I am doing
        It's all luck
Player 2 (P2): Neuroname, Polite Betrayal
        Only betray if the opponent has beckstabbed before
Player 3 (P3): The name the team gives to itself, The name the team gives to this strategy
        How does this strategy decide?
Player 4 (P4): LO_Num_1, Intelligent Betrayal
        How does this strategy decide?
--------------------------------------------------------------------------------
Section 1 - Player vs. Player
--------------------------------------------------------------------------------
Each column shows pts/round earned against each other player:
             P0     P1     P2     P3     P4
vs. P0 :      0   -467   -250   -500   -250
vs. P1 :     52      0     27   -102     30
vs. P2 :   -250   -449      0   -500   -250
vs. P3 :    100     20    100      0    100
vs. P4 :   -250   -450   -250   -500      0
TOTAL  :   -348  -1346   -373  -1602   -370
--------------------------------------------------------------------------------
Section 2 - Leaderboard
--------------------------------------------------------------------------------
Average points per round:
Team name (P#):  Score      with strategy name
Reecie Poo(P0):        -70 points with Win                                     
LO_Num_1  (P4):        -74 points with Intelligent Betrayal                    
Neuroname (P2):        -75 points with Polite Betrayal                         
Green87   (P1):       -270 points with I have no idea what I am doing          
The name t(P3):       -321 points with The name the team gives to this strategy
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
team0--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: Reecie Pooh
#     strategy_name: Win
#     strategy_description: Beat all the teams
#     move: A function that returns 'c' or 'b'
####

team_name = 'Reecie Pooh' # Only 10 chars displayed.
strategy_name = 'Win'
strategy_description = 'Just beat everyone.'

def move(my_history, their_history, my_score, their_score):
    if 0 or 'c' in their_history:
        return 'b'
    elif their_history == 'c':
        return 'b'
    else:
        return 'b'
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.

    Make my move.
    Returns 'c' or 'b'.
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty.
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].

    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.

    return 'b'


def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':

    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='',
              my_score=0,
              their_score=0,
              result='b'):
         print('Test Passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc',
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0,
              their_score=0,
              result='b')
--------------------------------------------------------------------------------
team1--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####
import random

team_name = 'Green87' # Only 10 chars displayed.
strategy_name = 'I have no idea what I am doing'
strategy_description = "It's all luck"

def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.

    Make my move.
    Returns 'c' or 'b'.
    '''
    number = random.randint(1, 6)
    if number is 1:
        return 'b'
    else:
        return 'c'
    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty.
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].

    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.

    #return 'c'


def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':

    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='',
              my_score=0,
              their_score=0,
              result='b'):
         print('Test Passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc',
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0,
              their_score=0,
              result='b')
--------------------------------------------------------------------------------
team2--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: neuroname
#     strategy_name: Polite Betrayal
#     strategy_description: Only betray when the opponent backstabs you
#     move: A function that returns 'c' or 'b'
####

team_name = 'Neuroname' # Only 10 chars displayed.
strategy_name = 'Polite Betrayal'
strategy_description = 'Only betray if the opponent has beckstabbed before'
    
def move(my_history, their_history, my_score, their_score):
    if 0 or 'c' in their_history:
        return 'b'
    elif their_history == 'c':
        return 'b'
    else:
        return 'b'
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    return 'c'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print('Test Passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             
--------------------------------------------------------------------------------
team3--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'The name the team gives to itself' # Only 10 chars displayed.
strategy_name = 'The name the team gives to this strategy'
strategy_description = 'How does this strategy decide?'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    return 'c'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print('Test Passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             
--------------------------------------------------------------------------------
team4--------------------------------------------------------------------------------
from __future__ import print_function

####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'LO_Num_1' # Only 10 chars displayed.
strategy_name = 'Intelligent Betrayal'
strategy_description = 'How does this strategy decide?'

ag_history = []

def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''
    my_move = ''
    ag_history.append(their_history)
    if ag_history[:-3] == ['c', 'c', 'c']:
        my_move = 'b'
    elif ag_history[:-3] == ['b', 'c', 'c'] or ag_history[:-3] == ['c', 'b', 'c'] or ag_history[:-3] == ['c', 'c', 'b']:
        my_move = 'c'
    else:
        my_move = 'b'
        
    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    return my_move

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
    
    
    '''
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print('Test Passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')
    '''--------------------------------------------------------------------------------
Section 3 - Game Data for Team Reecie Pooh
--------------------------------------------------------------------------------
52 pt/round: Reecie Pooh(P0) "Win"
-467 pt/round: Green87(P1) "I have no idea what I am doing"
BBBBBBBbBbBBBBBbBbBbBBBBbBBBBBBBBBBBBBBBBBBBBBBbBBbbBbBBBBBBBBBBBBBBBBBBBBbBbBBB
cccccccbcbcccccbcbcbccccbccccccccccccccccccccccbccbbcbccccccccccccccccccccbcbccc

BBBBBBBBBBBbBBBBbBBBBBbBBBBBbBBBBBBBBBBBBBBBBbBBBbBBbBbBBBBBBBBBBBBBBBBBBBBBBBBb
cccccccccccbccccbcccccbcccccbccccccccccccccccbcccbccbcbccccccccccccccccccccccccb

BBBBBbBBbBB
cccccbccbcc

--------------------------------------------------------------------------------
-250 pt/round: Reecie Pooh(P0) "Win"
-250 pt/round: Neuroname(P2) "Polite Betrayal"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bb
bb

--------------------------------------------------------------------------------
100 pt/round: Reecie Pooh(P0) "Win"
-500 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBB
ccc

--------------------------------------------------------------------------------
-250 pt/round: Reecie Pooh(P0) "Win"
-250 pt/round: LO_Num_1(P4) "Intelligent Betrayal"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbb
bbb

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Green87
--------------------------------------------------------------------------------
-467 pt/round: Green87(P1) "I have no idea what I am doing"
52 pt/round: Reecie Pooh(P0) "Win"
cccccccbcbcccccbcbcbccccbccccccccccccccccccccccbccbbcbccccccccccccccccccccbcbccc
BBBBBBBbBbBBBBBbBbBbBBBBbBBBBBBBBBBBBBBBBBBBBBBbBBbbBbBBBBBBBBBBBBBBBBBBBBbBbBBB

cccccccccccbccccbcccccbcccccbccccccccccccccccbcccbccbcbccccccccccccccccccccccccb
BBBBBBBBBBBbBBBBbBBBBBbBBBBBbBBBBBBBBBBBBBBBBbBBBbBBbBbBBBBBBBBBBBBBBBBBBBBBBBBb

cccccbccbcc
BBBBBbBBbBB

--------------------------------------------------------------------------------
-449 pt/round: Green87(P1) "I have no idea what I am doing"
27 pt/round: Neuroname(P2) "Polite Betrayal"
cccccccbcbbcbccbcbcccccccccccbccccccbccccccccccbccccccbcccccccccccbbccccccbccccb
BBBBBBBbBbbBbBBbBbBBBBBBBBBBBbBBBBBBbBBBBBBBBBBbBBBBBBbBBBBBBBBBBBbbBBBBBBbBBBBb

ccccbccbbcbccccbbcccccbcccccbbbccbccccccc
BBBBbBBbbBbBBBBbbBBBBBbBBBBBbbbBBbBBBBBBB

--------------------------------------------------------------------------------
20 pt/round: Green87(P1) "I have no idea what I am doing"
-102 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
CCCCCBCBCCCCCCCCBCCCCCBBBCCCCBCCCCCCCBCCCCCCCCCCCCCCBCCCCBCCCCCCBCBCBCCCCCCBCBCC
CCCCCcCcCCCCCCCCcCCCCCcccCCCCcCCCCCCCcCCCCCCCCCCCCCCcCCCCcCCCCCCcCcCcCCCCCCcCcCC

CCBBBBCBCCCCCCBCBCCCCBCBCBCCCCCCBCCCCCCBCCCCBCCCCCCCBCBCBCCCCCCCCCCCBCCCCCCCCCCC
CCccccCcCCCCCCcCcCCCCcCcCcCCCCCCcCCCCCCcCCCCcCCCCCCCcCcCcCCCCCCCCCCCcCCCCCCCCCCC

CBCBCCCCCCCCBCBCCCCCBCC
CcCcCCCCCCCCcCcCCCCCcCC

--------------------------------------------------------------------------------
-450 pt/round: Green87(P1) "I have no idea what I am doing"
30 pt/round: LO_Num_1(P4) "Intelligent Betrayal"
cccccbcbbbbccccccbcbcccccbccbccbccccccccbbccccccccbcccccbcccbcbcbccbccccccccccbc
BBBBBbBbbbbBBBBBBbBbBBBBBbBBbBBbBBBBBBBBbbBBBBBBBBbBBBBBbBBBbBbBbBBbBBBBBBBBBBbB

cbccbccccccccbccccccccccbccbcccccccccccc
BbBBbBBBBBBBBbBBBBBBBBBBbBBbBBBBBBBBBBBB

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Neuroname
--------------------------------------------------------------------------------
-250 pt/round: Neuroname(P2) "Polite Betrayal"
-250 pt/round: Reecie Pooh(P0) "Win"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bb
bb

--------------------------------------------------------------------------------
27 pt/round: Neuroname(P2) "Polite Betrayal"
-449 pt/round: Green87(P1) "I have no idea what I am doing"
BBBBBBBbBbbBbBBbBbBBBBBBBBBBBbBBBBBBbBBBBBBBBBBbBBBBBBbBBBBBBBBBBBbbBBBBBBbBBBBb
cccccccbcbbcbccbcbcccccccccccbccccccbccccccccccbccccccbcccccccccccbbccccccbccccb

BBBBbBBbbBbBBBBbbBBBBBbBBBBBbbbBBbBBBBBBB
ccccbccbbcbccccbbcccccbcccccbbbccbccccccc

--------------------------------------------------------------------------------
100 pt/round: Neuroname(P2) "Polite Betrayal"
-500 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
ccccccccccccccccccccccccccccccccccc

--------------------------------------------------------------------------------
-250 pt/round: Neuroname(P2) "Polite Betrayal"
-250 pt/round: LO_Num_1(P4) "Intelligent Betrayal"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team The name the team gives to itself
--------------------------------------------------------------------------------
-500 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
100 pt/round: Reecie Pooh(P0) "Win"
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

ccc
BBB

--------------------------------------------------------------------------------
-102 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
20 pt/round: Green87(P1) "I have no idea what I am doing"
CCCCCcCcCCCCCCCCcCCCCCcccCCCCcCCCCCCCcCCCCCCCCCCCCCCcCCCCcCCCCCCcCcCcCCCCCCcCcCC
CCCCCBCBCCCCCCCCBCCCCCBBBCCCCBCCCCCCCBCCCCCCCCCCCCCCBCCCCBCCCCCCBCBCBCCCCCCBCBCC

CCccccCcCCCCCCcCcCCCCcCcCcCCCCCCcCCCCCCcCCCCcCCCCCCCcCcCcCCCCCCCCCCCcCCCCCCCCCCC
CCBBBBCBCCCCCCBCBCCCCBCBCBCCCCCCBCCCCCCBCCCCBCCCCCCCBCBCBCCCCCCCCCCCBCCCCCCCCCCC

CcCcCCCCCCCCcCcCCCCCcCC
CBCBCCCCCCCCBCBCCCCCBCC

--------------------------------------------------------------------------------
-500 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
100 pt/round: Neuroname(P2) "Polite Betrayal"
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

ccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

--------------------------------------------------------------------------------
-500 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
100 pt/round: LO_Num_1(P4) "Intelligent Betrayal"
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

ccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBB

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team LO_Num_1
--------------------------------------------------------------------------------
-250 pt/round: LO_Num_1(P4) "Intelligent Betrayal"
-250 pt/round: Reecie Pooh(P0) "Win"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbb
bbb

--------------------------------------------------------------------------------
30 pt/round: LO_Num_1(P4) "Intelligent Betrayal"
-450 pt/round: Green87(P1) "I have no idea what I am doing"
BBBBBbBbbbbBBBBBBbBbBBBBBbBBbBBbBBBBBBBBbbBBBBBBBBbBBBBBbBBBbBbBbBBbBBBBBBBBBBbB
cccccbcbbbbccccccbcbcccccbccbccbccccccccbbccccccccbcccccbcccbcbcbccbccccccccccbc

BbBBbBBBBBBBBbBBBBBBBBBBbBBbBBBBBBBBBBBB
cbccbccccccccbccccccccccbccbcccccccccccc

--------------------------------------------------------------------------------
-250 pt/round: LO_Num_1(P4) "Intelligent Betrayal"
-250 pt/round: Neuroname(P2) "Polite Betrayal"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
100 pt/round: LO_Num_1(P4) "Intelligent Betrayal"
-500 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBBBBBBBBBBBBBBBBBBB
ccccccccccccccccccccccc

--------------------------------------------------------------------------------
